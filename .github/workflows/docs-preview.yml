name: Documentation Preview

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
      - 'pyproject.toml'
      - '.github/workflows/docs*.yml'

# Permissions needed for this workflow
permissions:
  contents: write
  pages: write
  pull-requests: write
  id-token: write

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate Python API documentation
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install sphinx sphinx-markdown-builder sphinx-autodoc-typehints
          python -m pip install -e .
      
      - name: Generate API documentation
        run: |
          mkdir -p docs/api
          sphinx-build -b markdown -D extensions=sphinx.ext.autodoc,sphinx.ext.napoleon,sphinx_autodoc_typehints,sphinx_markdown_builder -D autodoc_typehints=description -D autodoc_member_order=bysource -D source_suffix=.md src/shotgrid_mcp_server docs/api
          # Clean up and format the generated markdown files
          find docs/api -type f -name "*.md" -exec sed -i 's/^# /## /g' {} \;
          find docs/api -type f -name "*.md" -exec sed -i 's/^## Module/# Module/g' {} \;
      
      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: docs/api
          if-no-files-found: error

  # Documentation preview for PRs
  docs-preview:
    name: Documentation Preview
    needs: generate-api-docs
    if: |
      github.event_name == 'pull_request' &&
      github.actor != 'renovate[bot]' &&
      github.actor != 'dependabot[bot]' &&
      !contains(github.actor, 'bot')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'docs/package.json'
      
      - name: Download API documentation
        uses: actions/download-artifact@v4
        with:
          name: api-docs
          path: docs/api
      
      - name: Install Mintlify CLI
        run: npm install -g mintlify@latest
      
      - name: Install dependencies
        run: |
          cd docs
          if [ -f "package.json" ]; then
            npm install
          fi
      
      - name: Build documentation
        run: |
          cd docs
          mintlify build
      
      - name: Deploy preview
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs/.mintlify/build
          target-folder: pr-preview/${{ github.event.pull_request.number }}
          clean: true
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-preview/${prNumber}/`;
            const mintlifyUrl = 'https://shotgrid-mcp-server.mintlify.app';
            
            const comment = `## ðŸ“š Documentation Preview\n\nA preview of the documentation for this PR is available at:\n\nðŸ”— [View GitHub Pages Preview](${previewUrl})\n\nThis preview includes the automatically generated API documentation and will be updated when new changes are pushed to this PR.\n\nThe official Mintlify documentation is available at [${mintlifyUrl}](${mintlifyUrl}).`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
